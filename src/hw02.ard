\import Combinatorics.Factorial
\import Data.Bool
\import Data.List
\import Data.Or
\import Logic

-- 1. Определите полиморфный tail для списков.
\func tail {A : \Type} (_ : List A) : List A
  | nil => nil
  | _ :: ts => ts

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.
\func sort {A : \Type} (xs : List A) (cmp : A -> A -> Bool) : List A \elim xs
  | nil => nil
  | x :: xs => insert x (sort xs cmp) cmp
  \where {
    \func insert {A : \Type} (x : A) (xs : List A) (cmp : A -> A -> Bool) : List A \elim xs
      | nil => x :: nil
      | y :: rest => if (cmp x y) (x :: y :: rest) (y :: insert x rest cmp)
  }

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | false => idp
  | true => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | false => \case y \with {
    | false => idp
    | true => idp
  }
  | true => idp

-- 4. Докажите, что fac 3 равно 6.
\func fac3=6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl p => f p
  | inr q => g q

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R =>
  g (f (\lam p _ => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (h : \Sigma P Q) : R => f h.1 h.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) =>
  (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q =>
  -- I kinda don't understand what this means
  -- I just followed ~~voices in my head~~ goal guidence of arend
  f (\lam g => g (\lam s => f (\lam _ => s)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h1 : \Pi (x : Nat) -> P x -> Q x) (h2 : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) =>
  (h2.1, h1 h2.1 h2.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam p q => \case h 3 \with {
    | inl pe => pe p
    | inr qe => qe q
  }
