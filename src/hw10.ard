\import Arith.Nat (pred)
\import Data.Bool
\import Data.List
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import lect06 (Decide, no, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C)
            (p : isInj f) (q : isInj g) : isInj (g `o` f) => p o q

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam fx=fy => p (pmap g fx=fy)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultiplyOf3 (n : Nat) : Bool =>
  \case mod3 n \with {
    | 0 => true
    | _ => false
  }

\func isMultiplyOf5 (n : Nat) : Bool =>
  \case mod5 n \with {
      | 0 => true
      | _ => false
  }

\func isMultipleOf3Or5 (n : Nat) : \Type =>
  Or (So (isMultiplyOf3 n)) (\Sigma (Not (So (isMultiplyOf3 n))) (So (isMultiplyOf5 n)))

\func not-isProp {A : \Type} : isProp (Not A) =>
  Impl-isProp Empty-isProp

\func or-not-isProp {A B : \Type} (pA : isProp A) (pB : isProp B) : isProp (Or A (\Sigma (Not A) B)) =>
  \lam x y => \case \elim x, \elim y \with {
    | inl x, inl y => pmap inl (pA x y)
    | inr x, inr y => pmap inr (Sigma-isProp not-isProp pB x y)
    | inl x, inr y => absurd (y.1 x)
    | inr x, inl y => absurd (x.1 y)
  }

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  or-not-isProp (\lam _ _ => So-lem) (\lam _ _ => So-lem)

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc =>
  \lam p => ext (p, isMultipleOf3Or5-isProp _ _ _)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (forward, backward)
  \where {
    \func forward {A : \Type} (p : isTriv A) : \Sigma (isProp A) A =>
      (\lam x y => inv (p.2 x) *> p.2 y, p.1)

    \func backward {A : \Type} (p : \Sigma (isProp A) A) : isTriv A =>
      (p.2, \lam a' => p.1 p.2 a')
  }

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty =>
  \case p Unit-isProp Unit-isProp (inl ()) (inr ())

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) =>
  \lam x y => \case \elim n, \elim m, \elim x, \elim y \with {
    | 0, m, z<=n, z<=n => idp
    | suc n, suc m, s<=s x, s<=s y => pmap s<=s (LessOrEq-isProp x y)
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) =>
  \lam x y => \case \elim x, \elim y \with {
--     Почему он отказался выводить аргументы?
--     Почему если убрать pmap получается ошибка?
    | refl n=m, refl n=m' => pmap {n = m} (refl {_} {n} {m}) (\case \elim n, \elim n=m \with {
      | n, idp => \case \elim m, \elim n=m' \with {
        | m, idp => idp
      }
    })
--     Еще вот так можно, но я не понимаю, как ext это делает
--     | refl n=m, refl n=m' => pmap refl ext
    | refl p, inc r => absurd (aux n m p r)
    | inc r, refl p => absurd (aux n m p r)
    | inc r, inc r' => pmap inc So-lem
  }
  \where {
    \func aux (n m : Nat) (p : n = m) (s : So (n < m)) : Logic.Empty \elim n, m, p
      | 0, 0, p => s
      | suc n, suc m, p => aux n m (pmap pred p) s
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  \case p 0 0 (inc z<=n) (refl idp)

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A =>
  \lam x y => p (q (f x) (f y))

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => setLem (\lam a a' => \case dec a a' \with {
    | yes _ => \Sigma
    | no _ => Logic.Empty
  }) (\lam _ _ => mcases \with {
    | yes p => Unit-isProp
    | no n => Empty-isProp
  }) (\lam _ => mcases \with {
    | yes p => ()
    | no n => absurd (n idp)
  }) (\lam {_} {_} => mcases \with {
    | yes p => \lam _ => p
    | no _ => absurd
  })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) =>
  setLem (prop A B) (\lam x y => \case \elim x, \elim y \with {
    | inl a, inl a1 => p a a1
    | inl a, inr b => Empty-isProp
    | inr b, inl a => Empty-isProp
    | inr b, inr b1 => q b b1
  }) (\lam o => \case \elim o \with {
    | inl a => idp
    | inr b => idp
  }) (\lam {o1} {o2} => \case \elim o1, \elim o2 \with {
    | inl a, inl a1 => \lam p => pmap inl p
    | inl a, inr b => absurd
    | inr b, inl a => absurd
    | inr b, inr b1 => \lam p => pmap inr p
  })
  \where {
    \func prop (A B : \Type) (o1 o2 : Or A B) : \Type \elim o1, o2
      | inl a, inl a' => a = a'
      | inr b, inr b' => b = b'
      | _, _ => Logic.Empty
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) =>
  -- Доказал, но что происходит я слабо понимаю
  setLem prop
      (\lam x y => unfold prop (forall-isProp (\lam a => x a = y a) (\lam a => p a (x a) (y a))))
      (\lam _ _ => idp)
      (\lam p => \lam i a => p a i) -- funExt
  \where {
    \func prop {A : \Type} {B : A -> \Type} (f g : \Pi (x : A) -> B x) : \Type
      => \Pi (x : A) -> f x = g x
  }

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => setLem prop (prop-isProp pA) prop-refl prop-eq
  \where {
    \func prop {A : \Type} (l r : List A) : \Type \elim l, r
      | nil, nil => \Sigma
      | a :: l, b :: r => \Sigma (a = b) (prop l r)
      | _, _ => Logic.Empty

    \func prop-isProp {A : \Type} (pA : isSet A) (l r : List A) : isProp (prop l r) \elim l, r
      | nil, nil => Unit-isProp
      | nil, a :: r => Empty-isProp
      | a :: l, nil => Empty-isProp
      | a :: l, b :: r => Sigma-isProp (pA a b) (prop-isProp pA l r)

    \func prop-refl {A : \Type} (l : List A) : prop l l \elim l
      | nil => ()
      | a :: l => (idp, prop-refl l)

    \func prop-eq {A : \Type} {l r : List A} (p : prop l r) : l = r \elim l, r, p
      | nil, nil, _ => idp
      | a :: l, b :: r, (a=b, p) => rewrite a=b (pmap (:: b) (prop-eq p))
  }