\import Data.Maybe
\import Data.Or
\import Logic (Not)
\import Meta
\import Paths.Meta
\import hw06
\import lect06 (Decide, no, yes)
\import lect09

-- 1. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 2. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam (_, r) => \case r)
  | app t1 t2 => \case strategy t1 \with {
    | yes (s, r) => yes (app s t2, app-left r idp)
    | no n1 => \case strategy t2 \with {
      | yes (s, r) => yes (app t1 s, app-right idp r)
      | no n2 => app-strategy t1 t2 n1 n2
    }
  }
  | lam t => \case strategy t \with {
    | yes (s, r) => yes (lam s, red-lam r)
    | no n => no (\lam (s, r) => not-lam n s r)
  }
  | unit => Decide.no (\lam (_, r) => \case r)
  \where {
    \func not-lam {V : \Set} {t : Term (Maybe V)}
                  (n : Not (\Sigma (s : Term (Maybe V)) (Red1 t s)))
                  (s : Term V)
                  (r : Red1 (lam t) s) : Logic.Empty \elim s, r
      | lam s, red-lam r => n (s, r)

    \func app-strategy {V : \Set}
                       (t1 t2 : Term V)
                       (nt1 : Not (\Sigma (s : Term V) (Red1 t1 s)))
                       (nt2 : Not (\Sigma (s : Term V) (Red1 t2 s))) :
      Decide (\Sigma (s : Term V) (Red1 (app t1 t2) s)) \elim t1
      | var v => no (\lam (s, r) => not-red (\lam (_, p) => \case p) nt1 nt2 r)
      | app t1 t3 => no (\lam (s, r) => not-red (\lam (_, p) => \case p) nt1 nt2 r)
      | unit => no (\lam (s, r) => not-red (\lam (_, p) => \case p) nt1 nt2 r)
      | lam t1 => yes (_, beta idp idp)

    \func not-red {V : \Set} {t0 t1 s : Term V}
                  (not-lam : Not (\Sigma (s : Term (Maybe V)) (t0 = lam s)))
                  (nt0 : Not (\Sigma (s : Term V) (Red1 t0 s)))
                  (nt1 : Not (\Sigma (s : Term V) (Red1 t1 s)))
                  (r : Red1 (app t0 t1) s) : Logic.Empty \elim s, r
      | _, beta {f} p _ => not-lam (f, p)
      | app s _, app-left r _ => nt0 (s, r)
      | app _ s', app-right _ r => nt1 (s', r)
  }

-- 3. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t => {?}

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s => {?}

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t => {?}

-- 4. Определите функцию, которая по достижимому терму возвращает длину максимальной цепочки редукций из него.

\func red-length {V : \Set} (t : Term V) (acc : Acc Red1 t) : Nat
  => {?}

-- 5. Докажите, что нейтральные термы замкнуты относительно редукций.

\func neutralRed {V : \Set} {t s : Term V} (r : Red1 t s) (n : Neutral t) : Neutral s
  => {?}

-- 6. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 7. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- Optional
-- 8. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t
  => {?}
