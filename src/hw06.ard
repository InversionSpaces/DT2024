\import Algebra.Meta
\import Arith.Nat (pred)
\import Data.Bool
\import Data.List (List, length)
\import Logic
\import Paths
\import Paths.Meta
\import lect05 (funExt)
\import lect06
\import Meta
\open Nat (+, *)

-- 1. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | b List.:: xs => Found (a = b)
  | _ List.:: xs => Later (In a xs)

-- Optional:
-- 2. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

-- 3. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | base (R x y)
  | refl (x = y)
  | trans (z : A) (R x z) (ReflTransClosure R z y)

-- 4. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func \infix 4 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y => \lam _ _ => (
  \lam r => base r,
  closure=>R
)
  \where {
    \func closure=>R {x y : A} (r : ReflTransClosure R x y) : R x y \elim r
      | base r => r
      | ReflTransClosure.refl p => rewriteI p (refl x)
      | ReflTransClosure.trans z r n => trans x z y r (closure=>R n)
  }

-- 5. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".

\data Sublist {A : \Type} (xs ys : List A) \elim xs, ys
  | List.nil, _ => NilSublist
  | x List.:: xs, y List.:: ys => ConsSublist (x = y) (Sublist xs ys)
  | xs, y List.:: ys => SkipSublist (Sublist xs ys)

-- 6. Докажите, что Sublist (filter p xs) xs для любых p и xs.

\func filter-sublist-lem {A : \Type}
                         (p : A -> Bool)
                         (xs : List A)
  : Sublist (filter p xs) xs \elim xs
  | List.nil => NilSublist
  | a List.:: xs => cases (p a) \with {
    | false => SkipSublist (filter-sublist-lem p xs)
    | true => ConsSublist idp (filter-sublist-lem p xs)
  }

-- 7. Определите filter через if, а не через \case.
--     Докажите для этой версии filter лемму filter-lem.

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A
\elim xs
  | List.nil => List.nil
  | a List.:: xs =>
    \let tail => filter' p xs \in
      if (p a) (a List.:: tail) tail

\func filter-lem {A : \Type}
                 (p : A -> Bool)
                 (xs : List A) :
  LessOrEq (length (filter' p xs)) (length xs) \elim xs
  | List.nil => zero<=_
  | a List.:: xs => cases (p a) \with {
    | false => <=-step-lem (filter-lem p xs)
    | true => suc<=suc (filter-lem p xs)
  }


-- 8. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x => \case \elim x, f true \as ft, f false \as ff,
                                                                             idp : _ = ff,
                                                                             idp : _ = ft \with {
  | false, false, false, _, _ => cong
  | false, false, true, _, _ => cong
  | false, true, false, _, _ => cong
  | false, true, true, _, _ => cong
  | true, false, false, _, _ => cong
  | true, false, true, _, _ => cong
  | true, true, false, _, _ => cong
  | true, true, true, _, _ => cong
}

-- 9. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-dec : DecPred isEven => decider \where {
  \func decider (a : Nat) : Decide (isEven a)
    | 0 => yes (0, idp)
    | 1 => no (\lam even => \case \elim even \with {
      | (0, p) => \case p
      | (suc k, p) => \case p
    })
    | suc (suc a) => \case decider a \as d \with {
      | yes p => yes (lemma-forw p)
      | no n => no (\lam p => n (lemma-back p))
    }

  \func lemma-forw {a : Nat} (p : isEven a) : isEven (suc (suc a)) \elim a, p
    | 0, _ => (1, idp)
    | suc a, (0, sa=0) => \case sa=0
    | suc a, (suc k, sa=2k) => (suc (suc k), pmap suc (pmap suc sa=2k))

  \func lemma-back {a : Nat} (p : isEven (suc (suc a))): isEven a \elim a, p
    | 0, _ => (0, idp)
    | suc a, (0, sa=0) => \case sa=0
    | suc a, (suc k, sa=2k) => (k, pmap pred (pmap pred sa=2k))
}

-- 10. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p =>
  -- Вроде unfold не было на лекции, я списал его с интернета
  -- Как заставить раскрыть тип изученными средствами я не понял
  unfold (FromDecToBool, FromBoolToDec) (funExt (\lam _ => Bool) (
    \lam a => cases (p a) \with {
      | false => idp
      | true => idp
    }))

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P))
  : \Pi (x : A) -> (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x =>
  \lam a => (
    \lam left => \let l => unfold (FromBoolToDec, FromDecToBool) left \in
      \case P.2 a \as pa, idp : _ = pa \with {
        | yes p, _ => p
        | no n, pa=no => \case rewrite pa=no l
      },
    \lam right => unfold (FromDecToBool, FromBoolToDec) (
      cases (P.2 a) \with {
        | yes _ => ()
        | no n => n right
      })
  )

-- Optional:
-- 11. Парадокс Рассела показывает, что не существует множества всех множеств.
-- Если такое множеств существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя.
-- Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит.
-- Отсюда следует противоречии.
-- Теорема Кантора утверждает, что не сущесвует множества X с сюръекцией из X в множество подмножеств X.
-- Ее доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно.
-- Верно, что в общем случае существование такого утверждения влечет противоречие.
-- Это легко доказать при помощи исключенного третьего, но утверждение верно и без него.
-- Докажите этот факт.

\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty =>
  \let sa => q (\lam a => p a a) \in p sa sa
