\import Data.List
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import hw06 (In, contrProp)
\import lect08
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int
  | pos (suc n) => pos n
  | pos 0 => neg 1
  | neg n => neg (suc n)

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int
  | pos (suc n), pos (suc m) => pos (suc n Nat.+ suc m)
  | neg (suc n), neg (suc m) => neg (suc n Nat.+ suc m)
  | pos (suc n), neg (suc m) => pos n + neg m
  | neg (suc n), pos (suc m) => neg n + pos m
  | pos (suc n), pos zero => suc n
  | pos zero, y => y
  | neg x, pos zero => neg x

\func \infixl 7 * (x y : Int) : Int
  | pos (suc x), pos (suc y) => pos (suc x Nat.* suc y)
  | neg (suc x), neg (suc y) => pos (suc x Nat.* suc y)
  | pos (suc x), neg (suc y) => neg (suc x Nat.* suc y)
  | neg (suc x), pos (suc y) => neg (suc x Nat.* suc y)
  | pos zero, _ => pos zero
  | neg _, pos zero => pos zero
  | pos _, pos zero => pos zero

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | bzero
  | bx2 BinNat \with {
    | bzero => bzero
  }
  | bx2+1 BinNat

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => inP (suc b, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty =>
  \case p 0 \with {
    | inP (a, p) => \case p
  }

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type}
            (f : A -> B)
            (g : B -> C)
            (p : isSur f)
            (q : isSur g) : isSur (g `o` f) =>
  \lam c => \case q c \with {
    | inP (b, gb=c) => \case p b \with {
      | inP (a, fa=b) => inP (a, unfold o (rewrite fa=b gb=c))
    }
  }

\func o-sur' {A B C : \Type}
             (f : A -> B)
             (g : B -> C)
             (p : isSur (g `o` f)) : isSur g =>
  \lam c => \case p c \with {
    | inP (a, p) => inP (f a, p)
  }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\func subset {A : \Type} (l r : List A) : \Type =>
  \Pi (a : A) (in : In a l) -> In a r

\func Set (A : \Set) : \Set => Quotient (List A) (
  \lam l r => \Sigma (subset l r) (subset r l)
)

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f) => (=, =-isInj)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \let B : Subs A => \lam a => Not (f a a) \in \case p B \with {
    | inP (a, p) =>
      \let q : f a a = B a => \lam i => p i a
      \in contrProp {B a} (\lam ba _ => ba ((repl (inv q)) ba)) (\lam _ faa => (repl q) faa faa)
  }

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}

-- 10. Докажите, что wind инъективна.

\func wind-inj {x y : Int} (p : wind x = wind y) : x = y
  => {?}